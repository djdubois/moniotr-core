#!/bin/bash

CURRENT_DIR="$(dirname "$(readlink -f "$0")")"
source $CURRENT_DIR/../lib/moniotr-constants

TRAFFIC_DIR_BY_ALL="$TRAFFIC_DIR/by-all"

ME=$(basename $0)

if [[ $# -eq 0 ]] || [[ "$1" == "help" ]]; then
    echo "This script extracts PCAP traffic previously generated by the specified network device and"
    echo "writes the results (if any) to a new pcap file."
    echo
    echo "Usage: $ME <DEVICE_ID> <NETWORK_NAME> <TIME_INITIAL> <TIME_FINAL> [<PCAP_FILE>]"
    echo
    echo "DEVICE_ID     Device identifier. It can be either a MAC Address, an IP Address, or the"
    echo "              name of the device."
    echo
    echo "NETWORK_NAME  Experiment identifier. Only consider the type of experiment among $NETWORK_NAMES."
    echo
    echo "TIME_INITIAL  Use form \"YYYY-MM-DD HH:MM:DD\" (do not specify the fractional part)."
    echo "              PCAP traffic before this time will be ignored."
    echo
    echo "TIME_FINAL    Use form \"YYYY-MM-DD HH:MM:DD\" (do not specify the fractional part)."
    echo "              PCAP traffic after this time will be ignored."
    echo
    echo "PCAP_FILE     Write the PCAP data on this file. If no file is specified, the default"
    echo "              name is \"DEVICE_ID.NETWORK_NAME.TIME_INITIAL.TIME_FINAL.pcap\"."
    echo
    echo "Example: $ME 11:22:33:44:55:66 unctrl \"2020-03-23 13:54:03\" \"2020-03-24 03:45:11\""
    exit
fi

ID="$1"
NETWORK_NAME="$2"
TIME_I="$3"
TIME_F="$4"
OUTPUT_PCAP="$5"

if [ $# -le 3 ]; then
    >&2 echo "$ME: Insufficient number of arguments."
    >&2 echo "For more information: $ME help"
    exit
fi

if [ $# -le 4 ]; then
    OUTPUT_PCAP="$ID.$NETWORK_NAME.$TIME_I.$TIME_F.pcap"
    OUTPUT_PCAP="${OUTPUT_CAP// /_}"
fi

if [[ ! -d "$TRAFFIC_DIR_BY_ALL/$ID" ]] ; then
    >&2 echo "$ME: ID '$ID' not found. ID must be the MAC addrress, IP address, or name of a registered device."
    >&2 echo "For more information: $ME help"
    exit
fi

MAC=`cat "$TRAFFIC_DIR_BY_ALL/$ID/$MAC_FILE"`
NAME=`cat "$TRAFFIC_DIR_BY_ALL/$ID/$NAME_FILE"`
IP=`cat "$TRAFFIC_DIR_BY_ALL/$ID/$IP_FILE"`

for network_name in $NETWORK_NAMES; do
    if [[ "$network_name" == "$NETWORK_NAME" ]]; then
        network_name_found="ok"
    fi
done

if [[ "$network_name_found" != "ok" ]]; then
    >&2 echo "$ME: NETWORK_NAME '$NETWORK_NAME' not found. NETWORK_NAME must be among $NETWORK_NAMES."
    >&2 echo "For more information: $ME help"
    exit
fi

if [[ ! "$TIME_F" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
    >&2 echo "$ME: TIME_FINAL not valid. It must be in \"YYYY-MM-DD HH:MM:DD\" format."
    >&2 echo "For more information: $ME help"
    exit
fi

if [[ ! "$TIME_I" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
    >&2 echo "$ME: TIME_INITIAL not valid. It must be in \"YYYY-MM-DD HH:MM:DD\" format."
    >&2 echo "For more information: $ME help"
    exit
fi

DATE_I=`date --date="$TIME_I -1 day" +%Y-%m-%d`
DATE_F=`date --date="$TIME_F +1 day" +%Y-%m-%d`

DATE_PREFIX=`printf '%s\x0%s\n' "$DATE_I" "$DATE_F" | sed 's/\(.*\).*\x0\1.*/\1/'`

ERROR=0
mergecap $TRAFFIC_DIR_BY_ALL/$MAC/$NETWORK_NAME/$DATE_PREFIX* -w "$OUTPUT_PCAP.tmp" || ERROR=1

editcap -A "$TIME_I" -B "$TIME_F" -F pcap -r "$OUTPUT_PCAP.tmp" "$OUTPUT_PCAP" || ERROR=1
rm "$OUTPUT_PCAP.tmp"

if [[ "$ERROR" == 1 ]]; then
    >&2 echo "$ME: Error executing mergecap or edicatp. Please check that the parameters are correct."
    >&2 echo "For more information: $ME help"
    exit
else
  echo "$OUTPUT_PCAP"
  echo "Created $OUTPUT_PCAP (D: $MAC/$IP/$NAME, N: $NETWORK_NAME, T: $TIME_I ~ $TIME_F)"
fi
