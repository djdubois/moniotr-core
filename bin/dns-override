#!/bin/bash

# This script manages DNS overrides.
# Changes made by this script are persistent across restarts.

CURRENT_DIR="$(dirname "$(readlink -f "$0")")"
source $CURRENT_DIR/../lib/moniotr-constants

COMMAND="$1"
ID="$2"
PARAM="$3"
PARAM2="$4"
DEST="$TRAFFIC_DIR/by-all/$ID"
MAC_FILE=$DEST/$MAC_FILE
DNSOVERRIDE_FILE=$DEST/$DNSOVERRIDE_FILE
ME=$(basename $0)

function usage()
{
    echo "Usage: $ME <add|del> <ID> <DESTINATION> [ <REDIRECT_IP> | NXDOMAIN | RESOLVE ]"
    echo "       $ME <sync|wipe|list> <ID>"
}

function help()
{
    echo "This script manages DNS redirections on a per-device basis."
    echo "Changes made using this script are applied immediately and are persistent"
    echo "across restarts."
    echo
    usage
    echo
    echo "add           Add or update a DNS override for a specific device."
    echo
    echo "del           Remove an existing DNS override for a specific device."
    echo
    echo "sync          Synchronizes DNS overrides for a specific device. This is needed the first time the"
    echo "              device connects or in case of manual changes to the device configuration or to the DNS rules."
    echo "              There is no need to sync if using add/del/wipe commands from this script."
    echo
    echo "list          List all existing DNS overrides for a specific device."
    echo
    echo "wipe          Remove all existing DNS overrides for a specific device."
    echo
    echo "ID            Device identifier. It can be either a MAC Address, an IP Address, or the"
    echo "              name of the device."
    echo
    echo "DESTINATION   Domain that will be overridden by the DNS. This automatically includes all subdomains."
    echo "              For example specifying 'test.com' will include any hostname ending in '.test.com'."
    echo "              Special destination '+' will match all destinations not matched by other redirects."
    echo "              If dnsmasq has been patched with REGEX support, standard regular expressions can be"
    echo "              specified as destinations between colons. For example: :node.*\.test\.com:"
    echo "              If more than one rule match a destination, regex will have highest priority, while"
    echo "              special destination '+' will have lowest priority. In case of ambiguity the rule will"
    echo "              be chosen non-deterministically."
    echo
    echo "REDIRECT_IP   IP returned by the DNS server when the client revolves the host. "
    echo "              Instead of an IP it is possible to specify the special values: NXDOMAIN and RESOLVE"
    echo "                  NXDOMAIN means that the destination will not be resolved (a NXDOMAIN error will be returned)"
    echo "                  RESOLVE means that the destination will be resolved normally using default DNS servers."
    echo "              If REDIRECT_IP is omitted, the default redirect IP will be NXDOMAIN."
    echo
    echo "Examples: $ME add 11:22:33:44:55:66 google.com 151.1.1.1"
    echo "          $ME add echodot + NXDOMAIN"
    echo "          $ME del 11:22:33:44:55:66 google.com"
    echo "          $ME wipe 123.124.125.126"
    exit
}

function add-dns-override()
{
    if [ ! -f "$DNSOVERRIDE_FILE" ] ; then
        touch "$DNSOVERRIDE_FILE"
    fi

    MAC=`cat $MAC_FILE`
    SEARCH=`grep  "^$2 " $DNSOVERRIDE_FILE`
    if [ -z "$SEARCH" ]; then
        echo "Adding to $1 a DNS override for $2 ($3)."
    else
        echo "Updating on $1 a DNS override for $2 ($3)."
        sed -i "/^$2 /d" $DNSOVERRIDE_FILE
    fi
    echo "$2 $3" >> $DNSOVERRIDE_FILE
    sort -u $DNSOVERRIDE_FILE -o $DNSOVERRIDE_FILE
}

function del-dns-override()
{
    if [ ! -f "$DNSOVERRIDE_FILE" ] ; then
        touch "$DNSOVERRIDE_FILE"
    fi

    MAC=`cat $MAC_FILE`
    SEARCH=`grep  "^$2 " $DNSOVERRIDE_FILE`
    if [ -z "$SEARCH" ]; then
        echo "Cannot remove from $1 a non-existent DNS override for $2."
        exit 1
    fi

    echo "Removing from $1 a DNS override for $2."
    sed -i "/^$2 /d" $DNSOVERRIDE_FILE
}

function sync-dns-overrides()
{
    #### Check if iptables chain exists, if not print a warning
    SEARCH_CHAIN=`iptables -t nat -S | grep "N DNSOVERRIDE"`
    if [ -z "$SEARCH_CHAIN" ]; then
        echo "WARNING: sync not executed because moniotr networking or dns override is not active"
        exit 1
    fi

    if [ ! -f "$DNSOVERRIDE_FILE" ] ; then
        touch "$DNSOVERRIDE_FILE"
    fi

    MAC=`cat $MAC_FILE`
    MONITOR_IF=`cat $TRAFFIC_DIR/by-mac/$MAC/$MONITOR_IF_FILE`
    DNSMASQ_FILE="$TRAFFIC_DIR/by-mac/$MAC/$DNSMASQ_FILE"
    tmp=( ${MAC//:/ } )

    # Get network index
    ALL_INTERFACES=($MONITORED_INTERFACES)
    ALL_RESOLV_CONF=($DNS_OVERRIDE_RESOLV_CONF)
    for ((if_index=0;if_index<${#ALL_INTERFACES[@]};if_index++)); do
        if [ ${ALL_INTERFACES[$if_index]} == $MONITOR_IF ]; then
            resolv_conf="${ALL_RESOLV_CONF[$if_index]}"
            break
        fi
    done

    oct2=$((53+if_index))
    oct3=$((16#${tmp[2]}))
    oct4=$((16#${tmp[3]}))
    dnsmasq_ip="127.$oct2.$oct3.$oct4"
    dnsmasq_port=$((16#${tmp[4]}${tmp[5]}))
    [ "$port" == "0" ] && dnsmasq_port="1"

    # Create IPTABLES rules
    iptables -t nat -D DNSOVERRIDE -m mac --mac-source $MAC -p udp -m udp --dport 53 -j DNAT --to-destination $dnsmasq_ip:$dnsmasq_port &> /dev/null
    iptables -t nat -D DNSOVERRIDE -m mac --mac-source $MAC -p tcp --dport 53 -j DNAT --to-destination $dnsmasq_ip:$dnsmasq_port &> /dev/null
    iptables -t nat -A DNSOVERRIDE -m mac --mac-source $MAC -p udp -m udp --dport 53 -j DNAT --to-destination $dnsmasq_ip:$dnsmasq_port
    iptables -t nat -A DNSOVERRIDE -m mac --mac-source $MAC -p tcp --dport 53 -j DNAT --to-destination $dnsmasq_ip:$dnsmasq_port

    # Clear IPSET rules
    if [ "$IP_BLOCK_DNS_OVERRIDE_EXCEPTION" == "true" ]; then
        ipset flush "DNS_OVERRIDE_$MAC"
    fi

    # Create DNSMASQ header
    echo "#File automatically managed by moniotr/dns-override." > $DNSMASQ_FILE
    echo "#You can edit the file $DNSOVERRIDE_FILE instead." >> $DNSMASQ_FILE
    echo "bind-interfaces" >> $DNSMASQ_FILE
    echo "listen-address=$dnsmasq_ip" >> $DNSMASQ_FILE
    echo "port=$dnsmasq_port" >> $DNSMASQ_FILE
    echo "resolv-file=$resolv_conf" >> $DNSMASQ_FILE
    echo "cache-size=0" >> $DNSMASQ_FILE

    # Create DNSMASQ filters
    while read in; do
        if [[ "$in" =~ (.*)[[:space:]](.*) ]]; then
            DESTINATION="${BASH_REMATCH[1]}"
            if [ "$DESTINATION" == "+" ]; then
                DESTINATION="#"
            fi
            if [ "${BASH_REMATCH[2]}" == "NXDOMAIN" ]; then
                echo "address=/$DESTINATION/" >> $DNSMASQ_FILE
            elif [ "${BASH_REMATCH[2]}" == "RESOLVE" ]; then
                echo "server=/$DESTINATION/#" >> $DNSMASQ_FILE
                if [ "$IP_BLOCK_DNS_OVERRIDE_EXCEPTION" == "true" ]; then
                    echo "ipset=/$DESTINATION/DNS_OVERRIDE_$MAC" >> $DNSMASQ_FILE
                fi
            else
                echo "address=/$DESTINATION/${BASH_REMATCH[2]}" >> $DNSMASQ_FILE
                if [ "$IP_BLOCK_DNS_OVERRIDE_EXCEPTION" == "true" ]; then
                    ipset -A DNS_OVERRIDE_$MAC ${BASH_REMATCH[2]}
                fi
            fi
        fi
    done < "$DNSOVERRIDE_FILE"

    # Restart DNSMASQ
    DNSMASQ_PID=`pgrep -f "$DNSMASQ_FILE"`
    while [ -n "$DNSMASQ_PID" ]; do
        kill $DNSMASQ_PID
        DNSMASQ_PID=`pgrep -f "$DNSMASQ_FILE"`
        if [ -z "$PID" ]; then
            break;
        fi
        sleep 0.5
    done

    DNSMASQ_SUCCESS="false"
    "$DNSMASQ" -C "$DNSMASQ_FILE" &> /dev/null && DNSMASQ_SUCCESS="true" || sleep 1
    if [ "$DNSMASQ_SUCCESS" != "true" ]; then
        "$DNSMASQ" -C "$DNSMASQ_FILE" &> /dev/null && DNSMASQ_SUCCESS="true" || sleep 2
    fi
    if [ "$DNSMASQ_SUCCESS" != "true" ]; then
        "$DNSMASQ" -C "$DNSMASQ_FILE" &> /dev/null && DNSMASQ_SUCCESS="true" || sleep 3
    fi
    if [ "$DNSMASQ_SUCCESS" != "true" ]; then
        "$DNSMASQ" -C "$DNSMASQ_FILE" && DNSMASQ_SUCCESS="true" || echo "Error executing '$DNSMASQ'. Aborting."
    fi
}

function list-dns-overrides()
{
    if [ ! -f "$DNSOVERRIDE_FILE" ] ; then
        echo "Destination $1 does not have a valid $DNSOVERRIDE_FILE file. Aborting."
        exit 1
    fi

    echo "List of DNS override for $1"
    while read in; do
        if [[ "$in" =~ (.*)[[:space:]](.*) ]]; then
            echo "   ${BASH_REMATCH[1]} -> ${BASH_REMATCH[2]}"
        fi
    done < "$DNSOVERRIDE_FILE"
    echo "End of list"
}

function wipe-dns-overrides()
{
    MAC=`cat $MAC_FILE`
    echo Permanenting removing DNS overrides associated with $1...
    mv "$DNSOVERRIDE_FILE" "$DNSOVERRIDE_FILE.old"
    touch "$DNSOVERRIDE_FILE"
}

if [ "$DNS_OVERRIDE" != "true" ]; then
    echo "This command is disabled because the DNS_OVERRIDE configuration option is not set to true."
    exit 1
fi

if [[ -z "$COMMAND" ]] || [[ "$COMMAND" != "add" ]] && [[ "$COMMAND" != "del" ]] && [[ "$COMMAND" != "sync" ]] && \
   [[ "$COMMAND" != "wipe" ]] && [[ "$COMMAND" != "list" ]]; then
    help
    exit
fi

if [[ -z "$ID" ]]; then
    echo Destination not specified.
    usage
    exit 1
fi

if [[ -z "$PARAM" ]] && ( [[ "$COMMAND" == "del" ]] || [[ "$COMMAND" == "add" ]] ); then
    echo Hostname not specified.
    usage
    exit 1
fi

if [ ! -f "$MAC_FILE" ] ; then
    echo "Destination $ID does not exist or is not properly configured. Aborting."
    exit 1
fi


if [[ "$COMMAND" == "add" ]]; then
    [ -z "$PARAM2" ] && PARAM2="NXDOMAIN"

    if [ "$PARAM2" != "NXDOMAIN" ] && [ "$PARAM2" != "RESOLVE" ] && ! check_ip "$PARAM2"; then
        echo "Invalid REDIRECT_IP. Valid values (case-sensitive) are NXDOMAIN, RESOLVE, or a valid IPv4."
        usage
        exit 1
    fi

    add-dns-override $ID $PARAM $PARAM2
    sync-dns-overrides $ID
elif [[ "$COMMAND" == "del" ]]; then
    del-dns-override $ID $PARAM
    sync-dns-overrides $ID
elif [[ "$COMMAND" == "sync" ]]; then
    echo Syncing DNS overrides associated with $ID...
    sync-dns-overrides $ID
elif [[ "$COMMAND" == "wipe" ]]; then
    wipe-dns-overrides $ID
    sync-dns-overrides $ID
elif [[ "$COMMAND" == "list" ]]; then
    list-dns-overrides $ID
fi
