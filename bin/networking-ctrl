#!/bin/bash

# This script manages the interface mirroring service.

CURRENT_DIR="$(dirname "$(readlink -f "$0")")"
source $CURRENT_DIR/../lib/moniotr-constants

read -r -a wan_gateways <<< $WAN_GATEWAYS
read -r -a monitored_interfaces <<< $MONITORED_INTERFACES
read -r -a copy_interfaces <<< $COPY_MONITORED_NETWORKS
read -r -a dns_override_resolv_conf <<< $DNS_OVERRIDE_RESOLV_CONF

function usage()
{
    echo "Usage: $ME <start|stop|restart|status>"
}

function help()
{
    echo "This script configures the network interfaces for Mon(IoT)r. In particular:"
    echo "1) Sets up the WAN gateway and NAT for each monitored network."
    echo "2) Sets up the Wi-Fi sources, if configured on moniotr.conf"
    echo "3) Copies traffic to external interfaces, if configured on moniotr.conf" 
    echo "Modifications done by this script are not persistent across restarts."
    echo
    usage
    echo
    echo "start         Configure the network interfaces for Mon(IoT)r."
    echo
    echo "stop          Remove the configuration of network interfaces for Mon(IoT)r."
    echo
    echo "restart       Re-configure the network interfaces for Mon(IoT)r."
    echo
    echo "status        Query the current status of network interfaces configuration."
}

function networking-status
{
    # We assume we are the only one modifying the interfaces with tc. Other modifications
    # May break the functionality of this.

    if [ `iptables -S | grep MONIOTR | wc -l` == "0" ]; then
        echo "Networking is not configured"
        return 0
   else
        echo "Networking is configured"
        return 1
   fi
}

function stopIPBlockListenPort()
{
    # Kill any bogus netcat active
    pkill -9 -f "nc -l $IP_BLOCK_LISTEN_PORT"
}

function startIPBlockListenPort()
{
    stopIPBlockListenPort
    # Start bogus netcat
    ( netcat -l $IP_BLOCK_LISTEN_PORT &> /dev/null ) &
    disown
}

function setupWAN()
{
    DEFAULT_GW=`ip route | grep default | cut -d ' ' -f 3`
    DEFAULT_IF=`ip route | grep default | cut -d ' ' -f 5`

    # setup DNS override chains, if DNS override is enabled
    if [ "$DNS_OVERRIDE" == "true" ]; then
        iptables -t nat -N DNSOVERRIDE &> /dev/null
        iptables -t nat -F DNSOVERRIDE

        for index in "${!monitored_interfaces[@]}" ; do
            monitored_if=${monitored_interfaces[index]}
            iptables -t nat -D PREROUTING -i $monitored_if -j DNSOVERRIDE &> /dev/null
            iptables -t nat -I PREROUTING -i $monitored_if -j DNSOVERRIDE
        done
    fi

    iptables -t nat -N MONIOTR &> /dev/null
    iptables -t nat -D POSTROUTING -j MONIOTR &> /dev/null
    iptables -t nat -I POSTROUTING -j MONIOTR
    iptables -t nat -F MONIOTR
    iptables -N MONIOTR &> /dev/null
    iptables -D FORWARD -j MONIOTR &> /dev/null
    iptables -I FORWARD -j MONIOTR
    iptables -F MONIOTR

    # Setup IP block
    if [ "$IP_BLOCK" == "true" ]; then
        iptables -t nat -N IPBLOCK &> /dev/null
        iptables -N IPBLOCK &> /dev/null
        iptables -t nat -F IPBLOCK
        iptables -F IPBLOCK
        if [ "$IP_BLOCK_DNS_OVERRIDE_EXCEPTION" == "true" ]; then
            iptables -I IPBLOCK -p tcp --dport 53 -j RETURN
            iptables -t nat -I IPBLOCK -p tcp --dport 53 -j RETURN
            iptables -I IPBLOCK -p udp --dport 53 -j RETURN
            iptables -t nat -I IPBLOCK -p udp --dport 53 -j RETURN
        fi
        for index in "${!monitored_interfaces[@]}" ; do
            monitored_if=${monitored_interfaces[index]}
            iptables -t nat -D PREROUTING -i $monitored_if -j IPBLOCK &> /dev/null
            iptables -D FORWARD -i $monitored_if -j IPBLOCK &> /dev/null
            iptables -t nat -I PREROUTING -i $monitored_if -j IPBLOCK
            iptables -I FORWARD -i $monitored_if -j IPBLOCK
        done
    fi

    RT_TABLE=100

    for index in "${!monitored_interfaces[@]}" ; do
        monitored_if=${monitored_interfaces[index]}
        wan_gw=${wan_gateways[index]}

        if [[ -z "$wan_gw" ]] || [[ "$wan_gw" == "default" ]] || [[ "$wan_gw" == "$DEFAULT_GW" ]]; then
            wan_gw=$DEFAULT_GW
            wan_if=$DEFAULT_IF
        else
            IP_ROUTE=`ip route get $wan_gw | head -n 1`
            read -r -a ip_route <<< $IP_ROUTE

            if [ "${ip_route[0]}" == "local" ]; then
                echo "Gateway $wan_gw not valid because it is local. Switching to default."
                wan_gw=$DEFAULT_GW
                wan_if=$DEFAULT_IF
            elif [ "${ip_route[1]}" == "dev" ]; then
                wan_if=${ip_route[2]}
            elif [ "${ip_route[3]}" == "dev" ]; then
                wan_if=${ip_route[4]}
            else
                echo "Gateway $wan_gw not recognized. Switching to default."
                wan_gw=$DEFAULT_GW
                wan_if=$DEFAULT_IF
            fi
        fi

        echo -n Setting $monitored_if gateway to $wan_gw/$wan_if

        if [ "$DNS_OVERRIDE" == "true" ]; then
            echo " (DNS override: ${dns_override_resolv_conf[index]})"
        else
            echo " (DNS from DHCP)"
        fi

        iptables -t nat -D MONIOTR -o $wan_if -j MASQUERADE &> /dev/null
        iptables -t nat -A MONIOTR -o $wan_if -j MASQUERADE
        iptables -I MONIOTR -i $monitored_if -o $wan_if -j ACCEPT
        iptables -I MONIOTR -i $wan_if -o $monitored_if -j ACCEPT
        iptables -A MONIOTR -i $monitored_if -j DROP
        iptables -A MONIOTR -o $monitored_if -j DROP

        ip rule delete table $RT_TABLE &> /dev/null

        ip rule add iif $monitored_if table $RT_TABLE &> /dev/null

        ip route flush table $RT_TABLE

        wan_ptp=`ifconfig $wan_if | grep POINTOPOINT | wc -l`

        if [ "$wan_ptp" == "0" ]; then
            ip route add default via $wan_gw dev $wan_if table $RT_TABLE
        else
            ip route add default dev $wan_if table $RT_TABLE
        fi

        if [ "$DNS_OVERRIDE" == "true" ]; then
            ns=$(cat ${dns_override_resolv_conf[index]} | grep -v '^#' | grep nameserver | awk '{print $2}')
            for ns_i in $ns; do
                ip route del $ns_i &> /dev/null
                if [ "$wan_ptp" == "0" ]; then
                    ip route add $ns_i via $wan_gw dev $wan_if
                else
                    ip route add $ns_i dev $wan_if
                fi
            done
        fi

        RT_TABLE=$((RT_TABLE+1))
    done
}

function teardownWAN()
{
    echo Removing WAN firewall and gateway rules...
    iptables -t nat -D POSTROUTING -j MONIOTR &> /dev/null
    iptables -D FORWARD -j MONIOTR &> /dev/null
    iptables -t nat -F MONIOTR &> /dev/null
    iptables -F MONIOTR &> /dev/null
    iptables -t nat -X MONIOTR &> /dev/null
    iptables -X MONIOTR &> /dev/null

    RT_TABLE=100

    for index in "${!monitored_interfaces[@]}" ; do
        monitored_if=${monitored_interfaces[index]}

        ip rule delete table $RT_TABLE &> /dev/null
        ip route flush table $RT_TABLE &> /dev/null

        iptables -t nat -D PREROUTING -i $monitored_if -j DNSOVERRIDE &> /dev/null
        iptables -t nat -D PREROUTING -i $monitored_if -j IPBLOCK &> /dev/null
        iptables -D FORWARD -i $monitored_if -j IPBLOCK &> /dev/null

        if [ "$DNS_OVERRIDE" == "true" ]; then
            ns=$(cat ${dns_override_resolv_conf[index]} | grep -v '^#' | grep nameserver | awk '{print $2}')
            for ns_i in $ns; do
                ip route del $ns_i &> /dev/null
                ip route del $ns_i &> /dev/null
            done
        fi

        RT_TABLE=$((RT_TABLE+1))
    done

    iptables -t nat -F DNSOVERRIDE &> /dev/null
    iptables -t nat -X DNSOVERRIDE &> /dev/null

     # Teardown IP block
     if [ "$IP_BLOCK" == "true" ]; then
        for index in "${!monitored_interfaces[@]}" ; do
            monitored_if=${monitored_interfaces[index]}
            iptables -t nat -D PREROUTING -i $monitored_if -j IPBLOCK &> /dev/null
            iptables -D FORWARD -i $monitored_if -j IPBLOCK &> /dev/null
        done
     fi

     iptables -t nat -F IPBLOCK &> /dev/null
     iptables -t nat -X IPBLOCK &> /dev/null
     iptables -F IPBLOCK &> /dev/null
     iptables -X IPBLOCK &> /dev/null
}

function addmirror()
{
        input_if=$1
        output_if=$2
        echo Mirroring all $input_if traffic to $output_if

        tc qdisc del dev $input_if clsact &> /dev/null
        tc qdisc add dev $input_if clsact
        tc filter add dev $input_if ingress matchall action mirred egress mirror dev $output_if
        tc filter add dev $input_if egress matchall action mirred egress mirror dev $output_if
}

function delmirror()
{
        mirror_if=$1
        echo Removing mirroring of $mirror_if
        tc qdisc del dev $mirror_if clsact &> /dev/null
}

function networking-start()
{

    networking-status &> /dev/null
    if [ $? == "1" ]; then
         echo "Failed: networking configuration of Mon(IoT)r is already started"
         exit 1
    fi

    setupWAN

    if [[ ! -z "$COPY_MONITORED_NETWORKS" ]]; then

        for index in "${!monitored_interfaces[@]}" ; do
            MONITORED_INTERFACE=${monitored_interfaces[index]}
            NETWORK_MIRROR=${copy_interfaces[index]}
            addmirror $MONITORED_INTERFACE $NETWORK_MIRROR
        done
    fi

    if [ "$IP_BLOCK" == "true" ]; then
        startIPBlockListenPort
    fi

    if [ "$DNS_OVERRIDE" == "true" ]; then
        # Update clients for DNS OVERRIDE
        LEASES=`dhcp-lease-list --parsable 2> /dev/null | awk '{print $2 ";" $4}'`
        NUM=0
        for lease in $LEASES; do
            NUM=$((NUM+1))
            lease=${lease/;/ }
            lease_array=($lease)
            MAC=${lease_array[0]}
            MAC=`sed 's/0\([0-9A-Fa-f]\)/\1/g;s/.*/\L\0/' <<< $MAC`
            IP=${lease_array[1]}
            $CURRENT_DIR/setup-device "$IP" "$MAC" &> /dev/null
        done
    fi
}

function networking-stop
{

    networking-status &> /dev/null
    if [ "$?" == "0" ]; then
         echo "Failed: networking configuration of Mon(IoT)r is already stopped"
         exit 1
    fi

    teardownWAN

    if [[ ! -z "$WIFI_SOURCES" ]]; then
        MIRROR_SOURCES=${WIFI_SOURCES//,/ }

        for mirror_source in $MIRROR_SOURCES; do
            delmirror $mirror_source
        done
    fi

    if [[ ! -z "$COPY_MONITORED_NETWORKS" ]]; then
        for mirror in $MONITORED_INTERFACES; do
            delmirror $mirror
        done
    fi

    stopIPBlockListenPort

    # Remove leftover dnsmasq processed by DNS_OVERRIDE (if any)
    pkill -f "dnsmasq -C $TRAFFIC_DIR" &> /dev/null
}

if [ "$1" == "start" ]; then
    networking-start
elif [ "$1" == "stop" ]; then
    networking-stop
elif [ "$1" == "restart" ]; then
    networking-stop
    sleep 1
    networking-start
elif [ "$1" == "status" ]; then
    networking-status
    exit $?
else
    help
fi
